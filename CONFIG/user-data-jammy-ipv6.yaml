after-deploy:
 - "PDSH_SSH_ARGS_APPEND=\"-q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\" pdsh -R ssh -w root@192.168.200.{{.NodeId}} \"echo 'datasource_list: [ None ]' | sudo -s tee /etc/cloud/cloud.cfg.d/90_dpkg.cfg\""
 - "PDSH_SSH_ARGS_APPEND=\"-q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"  pdsh -R ssh -w root@192.168.200.{{.NodeId}} \"sudo apt-get purge -y cloud-init\""
 - "PDSH_SSH_ARGS_APPEND=\"-q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"  pdsh -R ssh -w root@192.168.200.{{.NodeId}} \"sudo rm -rf /etc/cloud/; sudo rm -rf /var/lib/cloud/\""
 - "PDSH_SSH_ARGS_APPEND=\"-q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\"  pdsh -R ssh -w root@192.168.200.{{.NodeId}} \"rm /etc/netplan/50-cloud-init.yaml\""
command:
- systemctl disable systemd-udevd.service
- ssh-keygen -A
- ssh-keygen -t rsa -b 4096 -f /root/.ssh/id_rsa  -q -P ""
- ssh-keygen -t rsa -b 4096 -f /home/vorlon/.ssh/id_rsa  -q -P ""
- cp /etc/netplan/50-cloud-init.yaml /etc/netplan/00-installer-config.yaml
- echo "LANGUAGE=ru_RU:ru" > /etc/default/locale
- echo "LANG=ru_RU.UTF-8" >> /etc/default/locale
- touch /etc/cloud/cloud-init.disabled
- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o
  /usr/share/keyrings/docker-archive-keyring.gpg
- sed -i "s/^ExecStart=\/lib\/systemd\/systemd-networkd-wait-online/ExecStart=\/lib\/systemd\/systemd-networkd-wait-online --i enp1s0 -i enp2s0/"  /usr/lib/systemd/system/systemd-networkd-wait-online.service
- cat /usr/lib/systemd/system/systemd-networkd-wait-online.service
- apt update
config:
  INTERFACE_INIT:
    - name: enp1s0
    - name: enp2s0
  NETWORK_CONFIG_TPL: TPL/network-config.tpl
  NEXUS_REPO: https://archive.ubuntu.com/
  NEXUS_REPO_SEC: https://security.ubuntu.com/
  PIP_TPL_PATH: TPL/pip-conf.tpl
  ROOT_CERT_PATH: CERT/root.iblog.pro.crt
  SSD_TPL_PATH: TPL/sshd-config.tpl
  SSH_AUTH_KEYS: /root/.ssh/authorized_keys
  USER_DATA_TPL_PATH: TPL/user-data-ubuntu.tpl
  CDDiskTemplate: TPL/CDDiskTemplate.tpl
  SCSIDiskTemplate: TPL/SCSIDiskTemplate.tpl
  E1000Networkemplate: TPL/E1000Networkemplate.tpl
  IMAGENAME: jammy-server-cloudimg-amd64.img
  VMNAME_FQDN: 'cloud.local'
  VM_REPO: jammy
  VM_TEMPLATE: TPL/vm.template.xml
  VMPATH: '/cloud/KVM'
  VMIMAGEPATH: '/KVM/IMAGES'
create-image-vm:
 - "mkdir -p {{.Config.VMPATH}}/{{.VMNAME}}"
 - "if [[ -f {{.Config.VMPATH}}/{{.VMNAME}}-seed.qcow2 ]] ; then rm {{.Config.VMPATH}}/{{.VMNAME}}-seed.qcow2; fi"
 - "if [[ -f {{.Config.VMPATH}}/{{.VMNAME}}.qcow2 ]] ; then rm {{.Config.VMPATH}}/{{.VMNAME}}.qcow2; fi"
 - "cp {{.Config.VMIMAGEPATH}}/{{.Config.IMAGENAME}} {{.Config.VMPATH}}/{{.VMNAME}}.qcow2"
 - "qemu-img resize {{.Config.VMPATH}}/{{.VMNAME}}.qcow2 {{.ROOTFS_SIZE}}G"
 - "touch {{.Config.VMPATH}}/{{.VMNAME}}/meta-data"
 - "cloud-localds -v --network-config={{.Config.VMPATH}}/{{.VMNAME}}/network-config {{.Config.VMPATH}}/{{.VMNAME}}-seed.qcow2 {{.Config.VMPATH}}/{{.VMNAME}}/user-data {{.Config.VMPATH}}/{{.VMNAME}}/meta-data"
 - "{{$NodeId:=.NodeId}}{{$INTERFACEINIT:=(index .Network.Block \"200\")}}{{$MngNet:=$INTERFACEINIT.Network}}ssh-keygen -f \"/root/.ssh/known_hosts\" -R \"{{$MngNet}}{{$NodeId}}\""
network:
  block:
    '200':
      gateway4: 192.168.200.1
      nameservers:
        ip: 192.168.1.10
        search: cloud.local
      netmask: 24
      network: 192.168.200.
      netmask6: 64
      network6: "2001:db8:200:1234::"
    '400':
      netmask6: 64
      network6: "2001:db8:400:1234::"
    '600':
      netmask6: 64
      network6: "2001:db8:600:1234::"
    '800':
      netmask6: 64
      network6: "2001:db8:800:1234::"
  magic_mac: fa:16:3e
pgk:
- apt-transport-https
- ca-certificates
- curl
- gnupg
- lsb-release
- openssh-server
- net-tools
- tcpdump
- mc
- htop
- iotop
- iftop
- language-pack-ru
- pwgen
- net-tools
ssh-keys:
- ssh-rsa .........
vm-disk:
    - tmpl: "{{.Config.VMPATH}}/{{.VMNAME}}.qcow2"
    - tmpl: "{{.Config.VMPATH}}/{{.VMNAME}}-seed.qcow2"
