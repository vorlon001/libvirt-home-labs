// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: virsh.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Virsh_MachineState_FullMethodName      = "/virsh.Virsh/MachineState"
	Virsh_MachineCreate_FullMethodName     = "/virsh.Virsh/MachineCreate"
	Virsh_MachineDelete_FullMethodName     = "/virsh.Virsh/MachineDelete"
	Virsh_MachineSoftReboot_FullMethodName = "/virsh.Virsh/MachineSoftReboot"
	Virsh_MachineHardReboot_FullMethodName = "/virsh.Virsh/MachineHardReboot"
	Virsh_MachineShutdown_FullMethodName   = "/virsh.Virsh/MachineShutdown"
	Virsh_MachineShutoff_FullMethodName    = "/virsh.Virsh/MachineShutoff"
	Virsh_MachineStart_FullMethodName      = "/virsh.Virsh/MachineStart"
	Virsh_MachinePause_FullMethodName      = "/virsh.Virsh/MachinePause"
	Virsh_MachineResume_FullMethodName     = "/virsh.Virsh/MachineResume"
)

// VirshClient is the client API for Virsh service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirshClient interface {
	MachineState(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineCreate(ctx context.Context, in *VirshCreateRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineDelete(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineSoftReboot(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineHardReboot(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineShutdown(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineShutoff(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineStart(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachinePause(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
	MachineResume(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error)
}

type virshClient struct {
	cc grpc.ClientConnInterface
}

func NewVirshClient(cc grpc.ClientConnInterface) VirshClient {
	return &virshClient{cc}
}

func (c *virshClient) MachineState(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineCreate(ctx context.Context, in *VirshCreateRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineDelete(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineSoftReboot(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineSoftReboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineHardReboot(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineHardReboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineShutdown(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineShutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineShutoff(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineShutoff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineStart(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachinePause(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachinePause_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virshClient) MachineResume(ctx context.Context, in *VirshRequest, opts ...grpc.CallOption) (*VirshReply, error) {
	out := new(VirshReply)
	err := c.cc.Invoke(ctx, Virsh_MachineResume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirshServer is the server API for Virsh service.
// All implementations must embed UnimplementedVirshServer
// for forward compatibility
type VirshServer interface {
	MachineState(context.Context, *VirshRequest) (*VirshReply, error)
	MachineCreate(context.Context, *VirshCreateRequest) (*VirshReply, error)
	MachineDelete(context.Context, *VirshRequest) (*VirshReply, error)
	MachineSoftReboot(context.Context, *VirshRequest) (*VirshReply, error)
	MachineHardReboot(context.Context, *VirshRequest) (*VirshReply, error)
	MachineShutdown(context.Context, *VirshRequest) (*VirshReply, error)
	MachineShutoff(context.Context, *VirshRequest) (*VirshReply, error)
	MachineStart(context.Context, *VirshRequest) (*VirshReply, error)
	MachinePause(context.Context, *VirshRequest) (*VirshReply, error)
	MachineResume(context.Context, *VirshRequest) (*VirshReply, error)
	mustEmbedUnimplementedVirshServer()
}

// UnimplementedVirshServer must be embedded to have forward compatible implementations.
type UnimplementedVirshServer struct {
}

func (UnimplementedVirshServer) MachineState(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineState not implemented")
}
func (UnimplementedVirshServer) MachineCreate(context.Context, *VirshCreateRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineCreate not implemented")
}
func (UnimplementedVirshServer) MachineDelete(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineDelete not implemented")
}
func (UnimplementedVirshServer) MachineSoftReboot(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineSoftReboot not implemented")
}
func (UnimplementedVirshServer) MachineHardReboot(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineHardReboot not implemented")
}
func (UnimplementedVirshServer) MachineShutdown(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineShutdown not implemented")
}
func (UnimplementedVirshServer) MachineShutoff(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineShutoff not implemented")
}
func (UnimplementedVirshServer) MachineStart(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineStart not implemented")
}
func (UnimplementedVirshServer) MachinePause(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachinePause not implemented")
}
func (UnimplementedVirshServer) MachineResume(context.Context, *VirshRequest) (*VirshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineResume not implemented")
}
func (UnimplementedVirshServer) mustEmbedUnimplementedVirshServer() {}

// UnsafeVirshServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirshServer will
// result in compilation errors.
type UnsafeVirshServer interface {
	mustEmbedUnimplementedVirshServer()
}

func RegisterVirshServer(s grpc.ServiceRegistrar, srv VirshServer) {
	s.RegisterService(&Virsh_ServiceDesc, srv)
}

func _Virsh_MachineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineState(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineCreate(ctx, req.(*VirshCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineDelete(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineSoftReboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineSoftReboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineSoftReboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineSoftReboot(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineHardReboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineHardReboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineHardReboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineHardReboot(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineShutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineShutdown(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineShutoff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineShutoff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineShutoff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineShutoff(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineStart(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachinePause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachinePause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachinePause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachinePause(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Virsh_MachineResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirshServer).MachineResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Virsh_MachineResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirshServer).MachineResume(ctx, req.(*VirshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Virsh_ServiceDesc is the grpc.ServiceDesc for Virsh service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Virsh_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virsh.Virsh",
	HandlerType: (*VirshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MachineState",
			Handler:    _Virsh_MachineState_Handler,
		},
		{
			MethodName: "MachineCreate",
			Handler:    _Virsh_MachineCreate_Handler,
		},
		{
			MethodName: "MachineDelete",
			Handler:    _Virsh_MachineDelete_Handler,
		},
		{
			MethodName: "MachineSoftReboot",
			Handler:    _Virsh_MachineSoftReboot_Handler,
		},
		{
			MethodName: "MachineHardReboot",
			Handler:    _Virsh_MachineHardReboot_Handler,
		},
		{
			MethodName: "MachineShutdown",
			Handler:    _Virsh_MachineShutdown_Handler,
		},
		{
			MethodName: "MachineShutoff",
			Handler:    _Virsh_MachineShutoff_Handler,
		},
		{
			MethodName: "MachineStart",
			Handler:    _Virsh_MachineStart_Handler,
		},
		{
			MethodName: "MachinePause",
			Handler:    _Virsh_MachinePause_Handler,
		},
		{
			MethodName: "MachineResume",
			Handler:    _Virsh_MachineResume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virsh.proto",
}
